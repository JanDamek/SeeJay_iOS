//
//  AppDelegate.m
//  SeeJay Radio
//
//  Created by Tomas Vanek on 2/21/13.
//  Copyright (c) 2013 SeeJayRadio. All rights reserved.
//

#import "AppDelegate.h"
#import "XMLReader.h"

@implementation AppDelegate

@synthesize player=_player, lastMeta, prevMeta, sleepInterval, archive = _archive;

static NSString * streamURL = @"http://mp3stream.abradio.cz:8000/seejay64.mp3.m3u";

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // Override point for customization after application launch.
    _player = [[comPlayer alloc]initWithURL:streamURL];
    [_player stop];
    _player.delegate = self;
    
    UIStoryboard *st;

    
//    CGSize s = [[UIScreen mainScreen] preferredMode].size;
//    int par = [[UIScreen mainScreen] preferredMode].pixelAspectRatio;
    
    if([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone){
        if (CGSizeEqualToSize([[UIScreen mainScreen] preferredMode].size,CGSizeMake(640, 1136)))
        {
            //move to your iphone5 storyboard
            st = [UIStoryboard storyboardWithName:@"MainStoryboard_iPhone5" bundle:[NSBundle mainBundle]];
        }
        else{
            //move to your iphone4s storyboard
            st = [UIStoryboard storyboardWithName:@"MainStoryboard_iPhone" bundle:[NSBundle mainBundle]];
        }
    }else{
        st = [UIStoryboard storyboardWithName:@"MainStoryboard_iPad" bundle:[NSBundle mainBundle]];
    }
    
    
    UIViewController *co = [st instantiateInitialViewController];
    self.window.rootViewController = co;
    
//    UITabBar *tabBar = [UITabBar appearance];
//    [tabBar setBackgroundImage:[UIImage imageNamed:@"bg_tabbar"]];
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application
{
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
    
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    //    _player.delegate = self;
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

-(void)stopPlaying:(comPlayer *)player{
    prevMeta = @"";
    lastMeta = @"";
}

-(NSString *)sleepIntervalToString{
    return [NSString stringWithFormat:@"%d min",sleepInterval];
}

-(void)zastavPlayer{
    if (sleepInterval<1){
        [timer invalidate];
        
        [_player stop];
        sleepInterval=0;
    }else
        sleepInterval-=1;
}

-(void)sleepButton{
    [timer invalidate];
    
    if (_player.player.rate!=0){
        sleepInterval+=15;
        if (sleepInterval>60){
            sleepInterval = 0;
        }
        
        if (sleepInterval>0)
            timer = [NSTimer scheduledTimerWithTimeInterval:60.0 target:self selector:@selector(zastavPlayer) userInfo:nil repeats:YES];
    }else sleepInterval=0;
}

-(void)metaData:(comPlayer *)player meta:(NSString *)meta{
    [self setNewMeta:meta];
}

-(void)setNewMeta:(NSString *)meta{
    if ([lastMeta compare:meta]!=NSOrderedSame){
        prevMeta = lastMeta;
        lastMeta = meta;
    }
}

-(void)loadArchive{
    NSData *podcast_data = [NSData dataWithContentsOfURL:[NSURL URLWithString:@"http://www.seejay.cz/xmlarchiv.php"]];
    NSDictionary *podcast = [XMLReader dictionaryForXMLData:podcast_data error:nil];
    NSObject *rss = [podcast valueForKey:@"rss"];
    NSArray *channel = [rss valueForKey:@"channel"];
    
    if (_archive){
        [_archive removeAllObjects];
    } else
        _archive = [[NSMutableArray alloc]init];
    
    if ([channel isKindOfClass:[NSArray class]]){
        for (NSDictionary *ch in channel) {
            NSMutableDictionary *i = [[NSMutableDictionary alloc]init];
            [i setValue:[[ch valueForKey:@"title"] valueForKey:@"text"] forKey:@"title"];
            
            NSMutableArray *items = [[NSMutableArray alloc]init];
            [i setValue:items forKey:@"items"];
            
            for (NSDictionary *it in [ch objectForKey:@"item"]) {
                NSString *title = [[it valueForKey:@"title"] valueForKey:@"text"];
                NSArray *sec_tit = [title componentsSeparatedByString:@"|"];
                
                NSString *buf = [sec_tit objectAtIndex:0];
                buf = [buf stringByReplacingOccurrencesOfString:@"\n" withString:@""];
                buf = [buf stringByReplacingOccurrencesOfString:@"\r" withString:@""];
                buf = [buf stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                
                NSMutableDictionary *porad = nil;
                for (porad in items) {
                    if ([[porad valueForKey:@"title"] isEqualToString:buf]){
                        break;
                    }
                }
                
                NSMutableArray *po_it;
                if (!porad){
                    porad = [[NSMutableDictionary alloc]init];
                    
                    [porad setValue:buf forKey:@"title"];
                    
                    buf = [[it valueForKey:@"description"]valueForKey:@"text"];
                    buf = [buf stringByReplacingOccurrencesOfString:@"\n" withString:@""];
                    buf = [buf stringByReplacingOccurrencesOfString:@"\r" withString:@""];
                    buf = [buf stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                    [porad setValue:buf forKey:@"description"];
                    
                    po_it = [[NSMutableArray alloc]init];
                    [porad setValue:po_it forKey:@"items"];
                    [items addObject:porad];
                }else{
                    po_it = [porad objectForKey:@"items"];
                }
                
                NSMutableDictionary *po_de = [[NSMutableDictionary alloc]init];
                
                buf = [sec_tit objectAtIndex:1];
                buf = [buf stringByReplacingOccurrencesOfString:@"\n" withString:@""];
                buf = [buf stringByReplacingOccurrencesOfString:@"\r" withString:@""];
                buf = [buf stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                [po_de setValue:buf forKey:@"title"];
                
                buf = [[it valueForKey:@"description"] valueForKey:@"text"];
                buf = [buf stringByReplacingOccurrencesOfString:@"\n" withString:@""];
                buf = [buf stringByReplacingOccurrencesOfString:@"\r" withString:@""];
                buf = [buf stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                [po_de setValue:buf forKey:@"description"];
                
                buf = [[it valueForKey:@"enclosure"] valueForKey:@"url"];
                buf = [buf stringByReplacingOccurrencesOfString:@"\n" withString:@""];
                buf = [buf stringByReplacingOccurrencesOfString:@"\r" withString:@""];
                buf = [buf stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                [po_de setValue:buf forKey:@"link"];
                
                buf = [[it valueForKey:@"enclosure"] valueForKey:@"length"];
                buf = [buf stringByReplacingOccurrencesOfString:@"\n" withString:@""];
                buf = [buf stringByReplacingOccurrencesOfString:@"\r" withString:@""];
                buf = [buf stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                [po_de setValue:buf forKey:@"size"];
                
                [po_it addObject:po_de];
            }
            
            [_archive addObject:i];
        }
    }
    
    //    items = [[channel valueForKey:@"item"] copy];
}


@end
